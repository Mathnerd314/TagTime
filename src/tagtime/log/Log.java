/*
 * Copyright 2011 Joseph Cloutier, Daniel Reeves, Bethany Soule
 * 
 * This file is part of TagTime.
 * 
 * TagTime is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 * 
 * TagTime is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with TagTime. If not, see <http://www.gnu.org/licenses/>.
 */

package tagtime.log;

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.util.Date;

import tagtime.Main;
import tagtime.quartz.RandomizedTrigger;
import tagtime.util.BackwardsAccessFile;

/**
 * Keeps a persistent log of all tag data, and (optionally) submits the
 * data to Beeminder. It additionally tracks what data has and has not
 * been submitted yet, so if the user is offline and Beeminder can't be
 * reached, the data can be submitted later.
 */
public class Log {
	/**
	 * The length of the UNIX timestamps in the log file.
	 */
	public static final int TIMESTAMP_LENGTH = 10;
	
	private final BackwardsAccessFile logFile;
	
	public Log() throws IOException {
		File filePath = new File(Main.getDataDirectory().getPath() + "/" +
					Main.getSettings().username + ".log");
		
		//this will create the file if necessary
		logFile = new BackwardsAccessFile(filePath, "rw");
	}
	
	/**
	 * Records the given ping in the log.
	 * @param timestamp The time, in milliseconds, corresponding to the
	 *            data. Assuming this data was generated by a standard
	 *            tag popup window, this should be the time the window
	 *            was created.
	 * @param data The data to log. This should include both
	 *            user-generated tags and any automatically-generated
	 *            data, but it does not need to include a timestamp.
	 */
	public void log(long timestamp, String data) {
		//start with a timestamp
		//(note: Unix time is in seconds, not milliseconds)
		String annotatedData = Long.toString(timestamp / 1000)
					//add the data
					+ " " + data;
		
		//pad the string with spaces until it is 55 characters long
		int paddingNeeded = 55 - annotatedData.length();
		if(paddingNeeded > 0) {
			annotatedData += String.format("%1$" + paddingNeeded + "c", ' ');
		} else {
			annotatedData += " ";
		}
		
		//add a human-readable timestamp and end the line
		annotatedData += "[" + DateFormat.getDateTimeInstance().format(timestamp) + "]\n";
		
		//write the data to the file
		try {
			logFile.seek(logFile.length());
			logFile.writeBytes(annotatedData);
		} catch(IOException e) {
			System.err.println("Unable to write this line to the log file:");
			System.err.println(annotatedData);
			e.printStackTrace();
		}
	}
	
	/**
	 * @return The last recorded timestamp in the log file. Returns -1 if
	 *         there are no recorded timestamps.
	 */
	public long getLastTimestamp() {
		try {
			//get the final line with a digit on it
			String timestamp = logFile.readLastLine("0123456789");
			
			timestamp = timestamp.substring(0, timestamp.indexOf(' '));
			return Long.parseLong(timestamp);
		} catch(IOException e) {}
		
		return -1;
	}
	
	/**
	 * Logs all pings that were skipped since the latest entry in the log
	 * file, marking them as "afk RETRO", optionally with more tags.
	 * @param extraTags Additional tags to add between "afk" and "RETRO".
	 *            This string does not need to start or end with a space.
	 */
	public void logMissedPings(String extraTags) {
		//determine the string to mark missed pings with
		String tags = "afk ";
		
		if(extraTags != null && !extraTags.equals("")) {
			tags += extraTags + " ";
		}
		
		tags += "RETRO";
		
		RandomizedTrigger trigger = Main.getTrigger();
		Date now = new Date();
		long lastPing = getLastTimestamp();
		
		if(lastPing != -1) {
			//lastPing was rounded down when converted to seconds, so if
			//we don't add 1, it will most likely (999/1000) repeat a ping
			Date ping = new Date((lastPing + 1) * 1000);
			
			for(ping = trigger.getFireTimeAfter(ping, true); ping.compareTo(now) < 0; ping =
						trigger.getFireTimeAfter(ping, true)) {
				log(ping.getTime(), tags);
			}
		}
	}
}
